<?xml version="1.0" encoding="utf-8"?>
<topic id="332f57d8-7775-49a6-8da1-bf1eb31f2acd" revisionNumber="1">
  <developerConceptualDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <introduction>
      <autoOutline>2</autoOutline>
      <!-- <autoOutline /> -->
      <para>This document describes the Finite State Machine Markup Language, a domain specific language to design finite state machine in XML format</para>
    </introduction>

    <section address="Setting">
      <title>Settings section</title>
      <content>
        <para>The element <codeInline>//StateMachine/settings</codeInline> gathers the information needed to generated the source code.</para>
      </content>

      <sections>
        <section address="Asynchronous">
          <title>Asynchronous or Synchronous</title>
          <content>
            <para>
              The boolean attribute <codeInline>//StateMachine/settings@asynchronous</codeInline> controls whether the state machine is asynchronous or synchronous.
            </para>
          </content>
        </section>
        <section address="Namespace">
          <title>Namespace</title>
          <content>
            <para>
              The string attribute <codeInline>//StateMachine/settings@namespace</codeInline> defines the namespace for the generated classes.
            </para>
          </content>
        </section>
        <section address="Object">
          <title>Object</title>
          <content>
            <para>
              At least one element <codeInline>//StateMachine/settings/object</codeInline> is required.
            </para>
          </content>
          <sections>
            <section address="ObjectClassName">
              <title>Object class name</title>
              <content>
                <para>
                  The required string attribute <codeInline>//StateMachine/settings/object@class</codeInline> defined the class name
                </para>
              </content>
            </section>
            <section address="ObjectInstanceName">
              <title>Object instance name</title>
              <content>
                <para>
                  The required string attribute <codeInline>//StateMachine/settings/object@instance</codeInline> definess the object variable when it is reference through the state machine.
                </para>
              </content>
            </section>
          </sections>
        </section>
        <section address="Context">
          <title>Context</title>
          <content>
            <para>
              The context class is generated by <application>StateBuilderDotNet</application>, this class is the entry point for all the other generated classes. 
              The element <codeInline>//StateMachine/settings/context</codeInline> is optional and holds the attributes <codeInline>class</codeInline> and <codeInline>instance</codeInline> 
            </para>
          </content>
          <sections>
            <section address="ContextClassName">
              <title>Context class name</title>
              <content>
                <para>
                  The optional string attribute <codeInline>//StateMachine/settings/context@class</codeInline> allows to change the name of generated context class.
                </para>
              </content>
            </section>
            <section address="ContextInstanceName">
              <title>Context instance name</title>
              <content>
                <para>
                  The optional string attribute <codeInline>//StateMachine/settings/context@instance</codeInline> changes the context variable when it is reference through the state machine.
                </para>
              </content>
            </section>
          </sections>
        </section>
      </sections>
    </section>

    <section address="Events">
      <title>Events</title>
      <content>
        <para>
          Events are sent to the state machine. An event may trigger a transition from a state to another.
        </para>
        <para>
          An event is identify by an id that will be used by transition to reference the event
        </para>
        <para>
          An event can have any number and any kind of parameters. These parameters are used by the transition actions and transition condition.
        </para>
        <para>
          An event may have a pre and/or a post action that are executed before and after the event being triggered,
          regardless of the current state, and whether a transition is triggered or not.
        </para>
        <para>
          Events are grouped inside an event source.  
        </para>
      </content>
    </section>
    <relatedTopics>

    </relatedTopics>
  </developerConceptualDocument>
</topic>