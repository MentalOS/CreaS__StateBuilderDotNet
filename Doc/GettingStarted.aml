<?xml version="1.0" encoding="utf-8"?>
<topic id="32b960d9-f56e-40d4-bfea-2366aa0eb50d" revisionNumber="1">
    <developerConceptualDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
        <introduction>
            <para>
                Here is the Getting Started, this will guide through the first thing to know about <application>StateBuilderDotNet</application>.
            </para>
            <autoOutline>1</autoOutline>
        </introduction>
        <section address="Download">
            <title>Installation instructions</title>
            <content>
                <list class="bullet">
                    <listItem>
                        <para>
                            Download the installer <externalLink>
                                <linkText>StateBuilderDotNet-Setup.exe</linkText>
                                <linkUri>http://www.stateforge.com/Files/StateBuilderDotNet-Setup.exe</linkUri>
                            </externalLink>.
                        </para>
                    </listItem>
                    <listItem>
                        <para>
                            Double click on <application>StateBuildetDotNet-Setup.exe</application> and follow the instructions.
                        </para>
                    </listItem>
                </list>

                <alert>
                    <para>
                        The <externalLink>
                            <linkText>.NET framework 4.0</linkText>
                            <linkUri>http://download.microsoft.com/download/7/B/6/7B629E05-399A-4A92-B5BC-484C74B5124B/dotNetFx40_Client_setup.exe</linkUri>
                        </externalLink> is required by <application>StateBuilderDotNet</application>. The installer automatically downloads and installs this framework if not already present.
                    </para>
                </alert>
                <alert>
                    <para>
                        The source code generated can be targeted to the .Net framework version 2.0, 3.5 or 4.0.
                    </para>
                </alert>
            </content>
        </section>

        <section address="StateDiagram">
            <title>State Diagram</title>
            <content>
                <para>
                    Let's consider the LED example which has a very simple state machine: 2 leaf states <codeInline>SwitchedOff</codeInline> and <codeInline>SwitchedOn</codeInline>, 2 events <codeInline>On()</codeInline> and <codeInline>Off()</codeInline>, 2 actions <codeInline>DoOff()</codeInline> and <codeInline>DoOn()</codeInline> and 2 transitions.
                </para>
                <mediaLink>
                    <caption>Led State Diagram</caption>
                    <image xlink:href="LedStateDiagram"/>
                </mediaLink>
            </content>
        </section>

        <section address="LedExampleFsm">
            <title>Finite State Machine Markup Language</title>
            <content>
                <para>
                    Below is the content of <localUri>Led.fsmcs</localUri>, which models in Xml format the LED state machine described above with the state diagram.
                </para>                
                <code source="..\Examples\CS\Led\Led.fsmcs" language="xml"/>
            </content>
        </section>

        <section address="LedClassDiagramAll">
            <title>Generated code class diagram</title>
            <content>
                <para>
                    From <localUri>Led.fsmcs</localUri> listed above, <application>StateBuilderDotNet</application> generates a set of classes: a context class and a class for each state.
                    Only the context class is used directly by the application class <codeInline>Led</codeInline>
                </para>
                <para>
                    The state machine design pattern found in the book "Design Patterns: Elements of Reusable Object-Oriented Software" written by the "Gang of Four" is used as the basic foundation for the generated code.
                </para>
                <para>
                    The class diagram of the generated code is illustrated below:
                </para>
                <mediaLink>
                    <caption>Led generared code class diagram</caption>
                    <image xlink:href="LedClassDiagramAll"/>
                </mediaLink>
            </content>
        </section>

        <section address="LedExampleSettings">
            <title>Settings</title>
            <content>
                <para>
                    Let's analyze the <codeInline>settings</codeInline> tag:
                </para>
                <code language="xml">
                    <![CDATA[
                      <settings asynchronous="false" namespace="StateForge.Examples.Led">
                          <object instance="led" class="Led"/>
                      </settings>
                    ]]>
                </code>
                <para>
                    The context class generated has its name inferred from the filename:
                    <command>
                        <replaceable>Led</replaceable>.fsmcs => <replaceable>Led</replaceable>Context
                    </command>
                </para>
                <para>
                    The namespace for the generated class is given through the <codeInline>namespace</codeInline> tag.
                </para>
                <para>
                    This state machine controls one object <codeInline>led</codeInline> of type <codeInline>Led</codeInline>
                </para>
                <para>
                    The oject instance name <codeInline>led</codeInline> is referenced in the actions to get access to this object.
                </para>
                <para>
                    From the object class name <codeInline>Led</codeInline>, the context class constructor is : <codeInline>LedContext(Led led)</codeInline>
                </para>
            </content>
        </section>

        <section address="LedExampleEvents">
            <title>Events</title>
            <content>
                <para>
                    Let's analyze the <codeInline>events</codeInline> tag:
                </para>
                <code language="xml">
                    <![CDATA[
                      <events>
                        <eventSource name="LedControl">
                          <event id="On"/>
                          <event id="Off"/>
                        </eventSource>
                      </events>
                    ]]>
                </code>
                <para>
                    The <codeInline>events</codeInline> tag has a group of different event source
                </para>
                <para>
                    The context class has a method for each event:
                </para>

                <list class="bullet">
                    <listItem>
                        <para>
                            LedContext.On()
                        </para>
                    </listItem>
                    <listItem>
                        <para>
                            LedContext.Off()
                        </para>
                    </listItem>
                </list>
                <para>
                    From now on, we know how the create an instance of the context class and send events to the context.
                </para>
            </content>
        </section>

        <section address="LedExampleStates">
            <title>States and transitions</title>
            <content>
                <para>
                    Let's analyze the <codeInline>state</codeInline> tag:
                </para>
                <code language="xml">
                    <![CDATA[
                 <state name="Root">
                     <state name="SwitchedOff">
                         <onEntry action="led.DoOff()"/>
                         <transition event="On" nextState="SwitchedOn"/>
                     </state>
                     <state name="SwitchedOn">
                         <onEntry action="led.DoOn()"/>
                         <transition event="Off" nextState="SwitchedOff"/>
                     </state>
                 </state>
                    ]]>
                </code>
                <list class="bullet">
                    <listItem>
                        <para>
                            State <codeInline>SwitchedOff</codeInline>
                        </para>
                        <list class="bullet">
                            <listItem>
                                <para>
                                    <codeInline>led.DoOff()</codeInline> is executed when the state <codeInline>SwitchedOff</codeInline> is entered.
                                </para>
                            </listItem>
                            <listItem>
                                <para>
                                    When the event <codeInline>On()</codeInline> is received, go to the <codeInline>SwitchedOn</codeInline> state.
                                </para>
                            </listItem>
                        </list>
                    </listItem>
                    <listItem>
                        <para>
                            State <codeInline>SwitchedOn</codeInline>
                        </para>
                        <list class="bullet">
                            <listItem>
                                <para>
                                    <codeInline>led.DoOn()</codeInline> is executed when the state <codeInline>SwitchedOn</codeInline> is entered.
                                </para>
                            </listItem>
                            <listItem>
                                <para>
                                    When the event <codeInline>Off()</codeInline> is received, go to the <codeInline>SwitchedOff</codeInline> state.
                                </para>
                            </listItem>
                        </list>
                    </listItem>
                </list>
                <para>

                </para>
            </content>
        </section>

        <section address="LedClassDiagram">
            <title>Class Diagram</title>
            <content>
                <para>The following picture is a UML class diagram of the Led system:</para>
                <mediaLink>
                    <caption>Led class diagram</caption>
                    <image xlink:href="LedClassDiagram"/>
                </mediaLink>
            </content>
        </section>
        <section address="LedCode">
            <title>C# Code</title>
            <content>
                <para>
                    Here the Led C# code:
                </para>
                <code source="..\Examples\CS\Led\Led.cs" language="c#"/>

                <list class="ordered">
                    <listItem>
                        <para>
                            <codeInline>LedContext:</codeInline>
                        </para>
                        <list class="bullet">
                            <listItem>
                                <para>
                                    is generated by <application>StateBuilderDotNet</application>.
                                </para>
                            </listItem>
                            <listItem>
                                <para>
                                    has an instance of <codeInline>Led</codeInline> which is given through its constructor.
                                </para>
                            </listItem>
                            <listItem>
                                <para>
                                    invokes the internal protected method <codeInline>Led.DoOn()</codeInline> and <codeInline>Led.DoOff()</codeInline> depending on the current state.
                                </para>
                            </listItem>
                            <listItem>
                                <para>
                                    holds the current state.
                                </para>
                            </listItem>
                        </list>
                    </listItem>
                    <listItem>
                        <para>
                            <codeInline>Led:</codeInline>
                        </para>
                        <list class="bullet">
                            <listItem>
                                <para>
                                    is exposed to the outside world through the public method <codeInline>On()</codeInline> and <codeInline>Off()</codeInline>.
                                </para>
                            </listItem>
                            <listItem>
                                <para>
                                    holds and creates <codeInline>LedContext</codeInline>.
                                </para>
                            </listItem>
                            <listItem>
                                <para>
                                    invokes <codeInline>LedContext.On()</codeInline> and <codeInline>LedContext.Off()</codeInline>.
                                </para>
                            </listItem>
                            <listItem>
                                <para>
                                    <codeInline>Led.DoOn()</codeInline> and <codeInline>Led.DoOff()</codeInline> are protected internal because only <codeInline>LedContext</codeInline> should access it.
                                </para>
                            </listItem>
                        </list>
                    </listItem>
                </list>
            </content>
        </section>

        <section address="RuntimeOutput">
            <title>Runtime Output</title>
            <content>
                <para>
                    Here is the output when calling <codeInline>context.EnterInitialState()</codeInline>, <codeInline>context.On()</codeInline> and <codeInline>context.Off()</codeInline>
                </para>
                <code>
                    LedContext: entering in state Root
                    LedContext: entering in state SwitchedOff
                    DoOff
                    LedContext: transition begins from state SwitchedOff to SwitchedOn, event On
                    LedContext: leaving from state SwitchedOff
                    LedContext: entering in state SwitchedOn
                    DoOn
                    LedContext: transition has ended from state SwitchedOff to SwitchedOn, event On
                    LedContext: transition begins from state SwitchedOn to SwitchedOff, event Off
                    LedContext: leaving from state SwitchedOn
                    LedContext: entering in state SwitchedOff
                    DoOff
                    LedContext: transition has ended from state SwitchedOn to SwitchedOff, event Off
                </code>
            </content>
        </section>
        <section address="FurtherReading">
            <title>Further reading</title>
            <content>
                <para>
                    This guide illustrates how to <application>StateBuilderDotNet</application> can be used to implement and integrate a finite state machine source code into an application.
                </para>
                <para>
                    For more complex state machines, please have a look at the numerous examples. See how asynchrounous, hierarchical and concurrent state machines can be used to solve complex real world problems.
                </para>
            </content>
        </section>
        <relatedTopics>
            <link xlink:href="ef3b3e3e-e2b5-4461-bd74-10e2cc3b6187">Visual Studio Integration</link>
            <link xlink:href="e255e8c9-98cd-4479-bb31-bb106056f709">List of examples</link>
        </relatedTopics>
    </developerConceptualDocument>
</topic>